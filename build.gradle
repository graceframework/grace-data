buildscript {
    repositories {
        // mavenLocal()
        mavenCentral()
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "io.github.gradle-nexus:publish-plugin:1.3.0"
    }
}

ext."signing.keyId" = project.hasProperty("signing.keyId") ? project.getProperty('signing.keyId') : System.getenv('SIGNING_KEY_ID')
ext."signing.password" = project.hasProperty("signing.password") ? project.getProperty('signing.password') : System.getenv('SIGNING_PASSPHRASE')
ext."signing.secretKeyRingFile" = project.hasProperty("signing.secretKeyRingFile") ? project.getProperty('signing.secretKeyRingFile') : ("${System.properties['user.home']}${File.separator}.gnupg${File.separator}secring.gpg")
ext.isReleaseVersion = !projectVersion.endsWith("SNAPSHOT")

version = project.projectVersion
group = "org.graceframework"

apply plugin: "java-library"
apply plugin: "io.github.gradle-nexus.publish-plugin"
apply plugin: "maven-publish"
apply plugin: "signing"
apply plugin: "idea"

allprojects {
    repositories {
        // mavenLocal()
        mavenCentral()
        // maven { url "https://repo.grails.org/grails/core" }
    }
}

subprojects {
    version = project.projectVersion
    group = "org.graceframework"

    configurations {
        documentation
    }

    apply plugin: "groovy"
    apply plugin: "eclipse"
    apply plugin: "idea"
    apply plugin: "java-library"
    apply plugin: "maven-publish"
    apply plugin: "signing"
    apply plugin: "checkstyle"
    apply plugin: "codenarc"

    configurations {
        documentation
    }

    dependencies {
        api "org.codehaus.groovy:groovy:$groovyVersion"
        testImplementation "org.codehaus.groovy:groovy-test-junit5:$groovyVersion"
        testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
        testImplementation "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
        testImplementation "org.junit.platform:junit-platform-runner:$junitJupiterPlatformVersion"
        testImplementation("org.spockframework:spock-core:$spockVersion") { transitive = false }

        if (project.name == "grace-datastore-gorm-tck") {
            api "org.codehaus.groovy:groovy-test-junit5:$groovyVersion"
            api "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
            api "org.junit.platform:junit-platform-runner:$junitJupiterPlatformVersion"
            runtimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
            implementation("org.spockframework:spock-core:$spockVersion") { transitive = false }
        }

        documentation "org.fusesource.jansi:jansi:2.4.0"
        documentation "org.codehaus.groovy:groovy-dateutil:$groovyVersion"
        documentation 'info.picocli:picocli:4.6.3'
        documentation ("com.github.javaparser:javaparser-core:$javaParserCoreVersion")
    }

    if (project.name == "grace-datastore-gorm-async") {
        dependencies {
            testImplementation project(":grace-datastore-gorm-tck")
        }
    }

    compileTestGroovy {
        configure(groovyOptions.forkOptions) {
            jvmArgs = [ '-Xmx768m']
        }
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(11)
        }
        withJavadocJar()
        withSourcesJar()
    }

    javadoc {
        failOnError = false
    }

    if (project.name == "grace-datastore-gorm" || project.name == "grace-datastore-gorm-test") {
        test {
            useJUnitPlatform()
        }
    }

    checkstyle {
        toolVersion = "10.3.2"
        configDirectory.set(rootProject.file("$rootDir/gradle/checkstyle"))
    }

    codenarc {
        toolVersion = '3.1.0'
        setConfigFile(new File("$rootDir/gradle/codenarc/codenarc.groovy"))
    }

    configure([javadoc]) {
        options.encoding "UTF-8"
        options.docEncoding "UTF-8"
        options.charSet "UTF-8"
        options.jFlags "-Xms64M", "-Xmx512M"
    }

    configure([groovydoc]) {
        classpath += configurations.documentation
    }

    publishing {
        publications {
            maven(MavenPublication) {
                groupId = project.group
                version = project.version

                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }

                from components.java

                pom {
                    name = "Grace Data"
                    description = "Grace Data Access Framework"
                    url = 'https://github.com/graceframework/grace-data'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'rainboyan'
                            name = 'Michael Yan'
                            email = 'rain@rainboyan.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/graceframework/grace-data.git'
                        developerConnection = 'scm:git:ssh://github.com:graceframework/grace-data.git'
                        url = 'https://github.com/graceframework/grace-data/tree/2022.0.x'
                    }
                }
            }
        }
    }

    afterEvaluate {
        signing {
            required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
            sign publishing.publications.maven
        }
    }
}

project.afterEvaluate {
    allprojects.repositories.each { handler ->
        handler.each {
            if (it.url.toString().startsWith("http://")) {
                throw new RuntimeException("Build should not define insecure HTTP-based Maven repostories")
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
            def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
            def ossStagingProfileId = System.getenv("SONATYPE_STAGING_PROFILE_ID") ?: project.hasProperty("sonatypeOssStagingProfileId") ? project.sonatypeOssStagingProfileId : ''
            nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
            snapshotRepositoryUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
            username = ossUser
            password = ossPass
            stagingProfileId = ossStagingProfileId
        }
    }
}